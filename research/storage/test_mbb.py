from spinbox import *

num_particles = 2

# ident = ManyBodyBasisSpinIsospinOperator(num_particles)
# list constructors make generating operators more streamlined
# sig = [[ManyBodyBasisSpinIsospinOperator(num_particles).sigma(i,a) for a in [0, 1, 2]] for i in range(num_particles)]
# tau = [[ManyBodyBasisSpinIsospinOperator(num_particles).tau(i,a) for a in [0, 1, 2]] for i in range(num_particles)]
# sig[particle][xyz]

def test_states():
    print('RANDOM STATES')
    bra_seed, ket_seed = 15, 1500001
    bra, ket = random_spin_bra_ket(num_particles, bra_seed, ket_seed)
    s0, s1 = ket, bra.dagger()
    print("|0> = \n", s0)
    print("|1> = \n", s1)
    print('INNER PRODUCTS')
    print("<0|0> = \n", s0.dagger() * s0)
    print("<1|1> = \n", s1.dagger() * s1)
    print("<0|1> = \n", s1.dagger() * s0)
    print('OUTER PRODUCTS')
    print("|0><0| = \n", s0 * s0.dagger())
    print("|1><1| = \n", s1 * s1.dagger())
    print("|0><1| = \n", s0 * s1.dagger())
    print('TO MANYBODY')
    s0 = s0.to_many_body_state()
    s1 = s1.to_many_body_state()
    print("|0> = \n", s0)
    print("|1> = \n", s1)
    print('INNER PRODUCTS')
    print("<0|0> = \n", s0.dagger() * s0)
    print("<1|1> = \n", s1.dagger() * s1)
    print("<0|1> = \n", s0.dagger() * s1)
    print('OUTER PRODUCTS')
    print("|0><0| = \n", s0 * s0.dagger())
    print("|1><1| = \n", s1 * s1.dagger())
    print("|0><1| = \n", s0 * s1.dagger())
    print('DONE TESTING STATES')


def test_operators():
    print('TESTING OPERATORS')
    print('TENSOR PRODUCT STATES')
    coeffs_uu = np.concatenate([spinor2('up', 'ket'), spinor2('up', 'ket')], axis=0)
    coeffs_ud = np.concatenate([spinor2('up', 'ket'), spinor2('down', 'ket')], axis=0)
    sp_uu = OneBodyBasisSpinState(2, 'ket', coeffs_uu)
    sp_ud = OneBodyBasisSpinState(2, 'ket', coeffs_ud)
    print("|uu> = \n", sp_uu)
    print("|ud> = \n", sp_ud)
    print('TENSOR PRODUCT OPERATORS')
    sigx0 = OneBodyBasisSpinOperator(2).sigma(0, 'x')
    sigy0 = OneBodyBasisSpinOperator(2).sigma(0, 'y')
    sigz0 = OneBodyBasisSpinOperator(2).sigma(0, 'z')
    print("sigx0 = \n", sigx0)
    print("sigy0 = \n", sigy0)
    print("sigz0 = \n", sigz0)
    print("sigx0 |uu> = \n", sigx0 * sp_uu)
    print("sigy0 |uu> = \n", sigy0 * sp_uu)
    print("sigz0 |uu> = \n", sigz0 * sp_uu)
    print("sigx0 |ud> = \n", sigx0 * sp_ud)
    print("sigy0 |ud> = \n", sigy0 * sp_ud)
    print("sigz0 |ud> = \n", sigz0 * sp_ud)
    print('EXCHANGE P(i,j)')
    P01 = OneBodyBasisSpinOperator(2).exchange(0, 1)
    print('P(0,1) = \n', P01)
    print("|ud> = \n", sp_ud)
    print("P(0,1) |ud> = \n", P01 * sp_ud)
    print("SCALAR MULTIPLICATION")
    five0 = OneBodyBasisSpinOperator(2).scalar_mult(0, 5)
    three1 = OneBodyBasisSpinOperator(2).scalar_mult(1, 3)
    print("5(0) = \n", five0)
    print("3(1) = \n", three1)
    print("5(0) |uu> = \n", five0 * sp_uu)
    print("3(1) |ud> = \n", three1 * sp_ud)

    print('MANYBODY STATES')
    sp_uu = sp_uu.to_many_body_state()
    sp_ud = sp_ud.to_many_body_state()
    print("|uu> = \n", sp_uu)
    print("|ud> = \n", sp_ud)
    print('MANYBODY OPERATORS')
    sigx0 = ManyBodyBasisSpinOperator(2).sigma(0, 'x')
    sigy0 = ManyBodyBasisSpinOperator(2).sigma(0, 'y')
    sigz0 = ManyBodyBasisSpinOperator(2).sigma(0, 'z')
    print("sigx0 = \n", sigx0)
    print("sigy0 = \n", sigy0)
    print("sigz0 = \n", sigz0)
    print("sigx0 |uu> = \n", sigx0 * sp_uu)
    print("sigy0 |uu> = \n", sigy0 * sp_uu)
    print("sigz0 |uu> = \n", sigz0 * sp_uu)
    print("sigx0 |ud> = \n", sigx0 * sp_ud)
    print("sigy0 |ud> = \n", sigy0 * sp_ud)
    print("sigz0 |ud> = \n", sigz0 * sp_ud)
    print('EXCHANGE P(i,j)')
    P01 = ManyBodyBasisSpinOperator(2).exchange(0, 1)
    print('P(0,1) = \n', P01)
    print("|ud> = \n", sp_ud)
    print("P(0,1) |ud> = \n", P01 * sp_ud)
    print("SCALAR MULTIPLICATION")
    five0 = ManyBodyBasisSpinOperator(2).scalar_mult(0, 5)
    three1 = ManyBodyBasisSpinOperator(2).scalar_mult(1, 3)
    print("5(0) = \n", five0)
    print("3(1) = \n", three1)
    print("5(0) |uu> = \n", five0 * sp_uu)
    print("3(1) |ud> = \n", three1 * sp_ud)

    print('MANY-BODY BASIS TEST: sigma(i) dot sigma(j) = 2P(i,j) - 1')
    bra, ket = random_spin_bra_ket(2)
    bra_mb = bra.to_many_body_state()
    ket_mb = ket.to_many_body_state()
    sigx01 = ManyBodyBasisSpinOperator(2).sigma(0, 'x').sigma(1, 'x')
    sigy01 = ManyBodyBasisSpinOperator(2).sigma(0, 'y').sigma(1, 'y')
    sigz01 = ManyBodyBasisSpinOperator(2).sigma(0, 'z').sigma(1, 'z')
    P01 = ManyBodyBasisSpinOperator(2).exchange(0, 1)
    lhs = bra_mb * sigx01 * ket_mb + bra_mb * sigy01 * ket_mb + bra_mb * sigz01 * ket_mb
    rhs = 2 * (bra_mb * P01 * ket_mb) - bra_mb * ket_mb
    print("sigma(i) dot sigma(j) = \n", lhs)
    print("2P(i,j) - 1 \n", rhs)

    print("ONE-BODY CHECK: 2P(i,j) - 1")
    P01 = OneBodyBasisSpinOperator(2).exchange(0, 1)
    print(2 * (bra * P01 * ket) - bra * ket)

    print('DONE TESTING OPERATORS')


if __name__=="__main__":
    test_states()
    print('OBB TEST COMPLETE')